/**
 * Новый вариант использования plugins. Принимает только id плагинов
 */
plugins {
    id 'java'
}

/**
 * Один из вариантов использования plugins: через отдельный скрипт файл
 */
apply from: 'script.gradle'
/**
 * Второй вариант использования plugins: через создание класса
 */
apply plugin: CustomPlugin.class

/**
 * В Gradle sourceSets - это механизм, который позволяет организовывать и настраивать исходные наборы (source sets) в проекте. Исходные наборы представляют собой группы исходных файлов, которые Gradle использует для выполнения различных задач, таких как компиляция, тестирование и создание дистрибутивов.
 * <p></p>
 * Обычно в проекте есть несколько исходных наборов, таких как исходный код основного приложения, тестовый код, ресурсы и тестовые ресурсы. sourceSets позволяет явно определять эти наборы и настраивать их параметры.
 * <p></p>
 * Пример конфигурации sourceSets в Gradle для Java проекта может выглядеть следующим образом:
 * <pre>{@code
 * sourceSets {
 *      main {
 *          java {
 *              srcDir 'src/main/java'
 *          }
 *          resources {
 *              srcDir 'src/main/resources'
 *          }
 *      }
 *      test {
 *          java {
 *              srcDir 'src/test/java'
 *          }
 *          resources {
 *              srcDir 'src/test/resources'
 *          }
 *      }
 * }
 *}
 * </pre>
 * Этот код определяет два исходных набора: main и test. Внутри каждого набора определены каталоги исходных файлов Java (java) и ресурсов (resources). Здесь указываются каталоги, в которых Gradle будет искать исходные файлы Java и ресурсы для каждого набора.
 * <p></p>
 * После того как исходные наборы определены с помощью sourceSets, вы можете использовать их для настройки других задач Gradle, таких как компиляция, тестирование, упаковка и т. д. Это позволяет вам более гибко управлять вашим проектом и его структурой.
 */
sourceSets {
    main {

    }

    test {

    }
}

dependencies {
    implementation "org.springframework:spring-webmvc:5.3.9"
}

/**
 * В блоке repositories вы можете указать различные типы репозиториев, такие как:
 * <p></p>
 * mavenCentral(): Это один из стандартных удаленных репозиториев Maven. Он содержит огромное количество библиотек и
 * зависимостей для Java и других языков.
 * <p></p>
 * jcenter(): Еще один стандартный удаленный репозиторий, поддерживаемый Bintray. Он также содержит множество библиотек
 * для различных языков программирования и платформ.
 * <p></p>
 * mavenLocal(): Локальный репозиторий Maven на вашем компьютере. Gradle будет искать зависимости в этом репозитории на
 * вашем локальном компьютере перед тем, как обратиться к удаленным репозиториям.
 * <p></p>
 * flatDir { dirs 'libs' }: Позволяет Gradle искать зависимости в локальной директории libs относительно корня проекта.
 * <p></p>
 * Пример использования repositories в Gradle:
 * <pre>{@code
 * repositories {
 *      mavenCentral()
 *      jcenter()
 *      mavenLocal()
 *      flatDir {
 *          dirs 'libs'
 *      }
 * }
 *}
 * </pre>
 * Этот код указывает Gradle использовать стандартные удаленные репозитории Maven (mavenCentral и jcenter), локальный
 * репозиторий Maven (mavenLocal) и локальную директорию libs, которая находится в корне проекта. Gradle будет искать
 * зависимости в этих репозиториях при выполнении сборки проекта и загрузке необходимых библиотек.
 */
repositories {
    // ~/.gradle/cashes --offline
    // ~/.m2/repository

    /**
     * Установка локального репозитория.
     * Например, репозиторий компании
     */
    maven {
        name "nexus alex"
        url "https://nexus.alex/repository"
    }
    mavenLocal()
    mavenCentral()
}

/**
 * Plugin - это обычный объект или script (в зависимости от нашего выбора), который
 * содержит функционал, который мы хотим привнести в наш текущий build.gradle.
 * Обычно это tasks.
 * <p></p>
 * compileJava: Эта задача компилирует исходные Java файлы в байт-код Java. Она берет исходные файлы из каталога src/main/java (по умолчанию) и компилирует их в байт-код классов.
 * <p></p>
 * processResources: Эта задача обрабатывает ресурсы проекта, такие как файлы конфигурации, ресурсы изображений и т. д. Она обычно используется для копирования ресурсов из каталога src/main/resources в каталог сборки.
 * <p></p>
 * classes: Эта задача собирает все скомпилированные классы вместе с обработанными ресурсами, создавая набор классов, готовых к упаковке в JAR файл или к другому использованию.
 * <p></p>
 * jar: Эта задача создает JAR (Java Archive) файл проекта. Она берет скомпилированные классы и ресурсы из каталога classes и упаковывает их в JAR файл.
 * <p></p>
 * assemble: Это задача, которая собирает все необходимые компоненты для создания конечной сборки проекта. Обычно включает в себя выполнение задачи jar и любых других необходимых этапов.
 * <p></p>
 * compileTestJava: Эта задача компилирует исходные файлы тестов Java. Она берет исходные файлы из каталога src/test/java (по умолчанию) и компилирует их.
 * <p></p>
 * processTestResources: Эта задача обрабатывает ресурсы, используемые в тестах, такие как файлы конфигурации тестов, тестовые данные и т. д. Она обычно копирует ресурсы из каталога src/test/resources в каталог сборки для тестов.
 * <p></p>
 * testClasses: Эта задача собирает все скомпилированные классы тестов вместе с обработанными тестовыми ресурсами, создавая набор классов, готовых к выполнению тестов.
 * <p></p>
 * test: Эта задача выполняет тесты проекта. Она запускает тестовые классы и проверяет их работу.
 * <p></p>
 * check: Эта задача выполняет проверки кода, такие как статический анализ, выполнение тестов и т. д. Она обычно включает в себя выполнение задачи test и других инструментов анализа кода.
 * <p></p>
 * build: Это задача, которая собирает все необходимые компоненты проекта и создает конечную сборку. Обычно включает в себя выполнение задачи assemble и выполнение всех проверок, определенных в задаче check.
 */
class CustomPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        addHelloTask(project)
    }

    void addHelloTask(Project project) {
        def map = [description: "Hello task", group: "alex", type: DefaultTask.class]
        project.task(map, "hello") {
            println "config phase. Task hello!"
            println "task_description: $description, group: $group, actions: $actions.size()"

            doFirst {
                println "execution phase, Action 1"
            }

            doLast {
                println "execution phase, Action 2"
            }
        }
    }
}